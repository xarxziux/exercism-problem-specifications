{
  "exercise": "affine-cipher",
  "version": "2.0.0",
  "comments": [
    "The test are divided into two groups: ",
    "* Encoding from English to affine cipher",
    "* Decoding from affine cipher to all-lowercase-mashed-together English"
  ],
  "cases": [
    {
      "description": "encode",
      "comments": [ "Test encoding from English to ciphertext with keys" ],
      "scenarios": [
        {
          "description": "encode yes",
          "property": "encode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "yes"
            },
            {
              "name": "a",
              "type": "integer",
              "value": 5
            },
            {
              "name": "b",
              "type": "integer",
              "value": 7
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "xbt"
            }
          ]
        },
        {
          "description": "encode no",
          "property": "encode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "no"
            },
            {
              "name": "a",
              "type": "integer",
              "value": 15
            },
            {
              "name": "b",
              "type": "integer",
              "value": 18
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "fu"
            }
          ]
        },
        {
          "description": "encode OMG",
          "property": "encode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "OMG"
            },
            {
              "name": "a",
              "type": "integer",
              "value": 21
            },
            {
              "name": "b",
              "type": "integer",
              "value": 3
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "lvz"
            }
          ]
        },
        {
          "description": "encode O M G",
          "property": "encode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "O M G"
            },
            {
              "name": "a",
              "type": "integer",
              "value": 25
            },
            {
              "name": "b",
              "type": "integer",
              "value": 47
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "hjp"
            }
          ]
        },
        {
          "description": "encode mindblowingly",
          "property": "encode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "mindblowingly"
            },
            {
              "name": "a",
              "type": "integer",
              "value": 11
            },
            {
              "name": "b",
              "type": "integer",
              "value": 15
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "rzcwa gnxzc dgt"
            }
          ]
        },
        {
          "description": "encode numbers",
          "property": "encode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "Testing,1 2 3, testing."
            },
            {
              "name": "a",
              "type": "integer",
              "value": 3
            },
            {
              "name": "b",
              "type": "integer",
              "value": 4
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "jqgjc rw123 jqgjc rw"
            }
          ]
        },
        {
          "description": "encode deep thought",
          "property": "encode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "Truth is fiction."
            },
            {
              "name": "a",
              "type": "integer",
              "value": 5
            },
            {
              "name": "b",
              "type": "integer",
              "value": 17
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "iynia fdqfb ifje"
            }
          ]
        },
        {
          "description": "encode all the letters",
          "property": "encode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "The quick brown fox jumps over the lazy dog."
            },
            {
              "name": "a",
              "type": "integer",
              "value": 17
            },
            {
              "name": "b",
              "type": "integer",
              "value": 33
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "swxtj npvyk lruol iejdc blaxk swxmh qzglf"
            }
          ]
        },
        {
          "description": "encode with a not coprime to m",
          "property": "encode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "This is a test."
            },
            {
              "name": "a",
              "type": "integer",
              "value": 6
            },
            {
              "name": "b",
              "type": "integer",
              "value": 17
            }
          ],
          "expected": [
            {
              "type": "error",
              "value": "a and m must be coprime."
            }
          ]
        }
      ]
    },
    {
      "description": "decode",
      "comments": [ "Test decoding from ciphertext to English with keys" ],
      "cases": [
        {
          "description": "decode exercism",
          "property": "decode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "tytgn fjr"
            },
            {
              "name": "a",
              "type": "integer",
              "value": 3
            },
            {
              "name": "b",
              "type": "integer",
              "value": 7
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "exercism"
            }
          ]
        },
        {
          "description": "decode a sentence",
          "property": "decode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "qdwju nqcro muwhn odqun oppmd aunwd o"
            },
            {
              "name": "a",
              "type": "integer",
              "value": 19
            },
            {
              "name": "b",
              "type": "integer",
              "value": 16
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "anobstacleisoftenasteppingstone"
            }
          ]
        },
        {
          "description": "decode numbers",
          "property": "decode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "odpoz ub123 odpoz ub"
            },
            {
              "name": "a",
              "type": "integer",
              "value": 25
            },
            {
              "name": "b",
              "type": "integer",
              "value": 7
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "testing123testing"
            }
          ]
        },
        {
          "description": "decode all the letters",
          "property": "decode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "swxtj npvyk lruol iejdc blaxk swxmh qzglf"
            },
            {
              "name": "a",
              "type": "integer",
              "value": 17
            },
            {
              "name": "b",
              "type": "integer",
              "value": 33
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "thequickbrownfoxjumpsoverthelazydog"
            }
          ]
        },
        {
          "description": "decode with no spaces in input",
          "property": "decode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "swxtjnpvyklruoliejdcblaxkswxmhqzglf"
            },
            {
              "name": "a",
              "type": "integer",
              "value": 17
            },
            {
              "name": "b",
              "type": "integer",
              "value": 33
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "thequickbrownfoxjumpsoverthelazydog"
            }
          ]
        },
        {
          "description": "decode with too many spaces",
          "property": "decode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "vszzm    cly   yd cg    qdp"
            },
            {
              "name": "a",
              "type": "integer",
              "value": 15
            },
            {
              "name": "b",
              "type": "integer",
              "value": 16
            }
          ],
          "expected": [
            {
              "type": "string",
              "value": "jollygreengiant"
            }
          ]
        },
        {
          "description": "decode with a not coprime to m",
          "property": "decode",
          "input": [
            {
              "name": "phrase",
              "type": "string",
              "value": "Test"
            },
            {
              "name": "a",
              "type": "integer",
              "value": 13
            },
            {
              "name": "b",
              "type": "integer",
              "value": 5
            }
          ],
          "expected": [
            {
              "type": "error",
              "value": "a and m must be coprime"
            }
          ]
        }
      ]
    }
  ]
}
